#!/bin/sh

# Amount of memory (in megabytes) to reserve for system operation when
# setting the maximum heap size.
RESERVED_MEMORY=512

TEXTGROUNDER_VERSION=0.1.0

HADOOP_FAILURE_OK_ARGS="-Dmapred.max.map.failures.percent=20 -Dmapred.max.reduce.failures.percent=20"

dbg() {
  echo >&2 "$@"
}

if [ -z "$TEXTGROUNDER_DIR" ]; then
  dbg "Must set TEXTGROUNDER_DIR to top level of TextGrounder distribution"
  exit 1
fi

#find_toplevel() {
#  (
#  while [ ! -e THIS.IS.TEXTGROUNDER ]; do
#    if [ "`pwd`" = / ]; then
#      echo ""
#      exit 1
#    fi
#    cd ..
#  done
#  echo "`pwd`"
#  )
#}
#
#
#TEXTGROUNDER_TOP=`find_toplevel`
#if [ -z "$TEXTGROUNDER_TOP" ]; then
#  if [ -z "$TEXTGROUNDER_DIR" ]; then
#    dbg "Must set TEXTGROUNDER_DIR to top level of TextGrounder distribution"
#    exit 1
#  fi
#  TEXTGROUNDER_TOP="$TEXTGROUNDER_DIR"
#fi
#
#echo "Top level is $TEXTGROUNDER_TOP"

JAVA="$JAVA_HOME/bin/java"
HADOOP_BINARY="${HADOOP_BINARY:-hadoop}"

#RUN_SBT="$JAVA -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=512m -Xmx2048M -Xss2M -jar $TEXTGROUNDER_DIR/bin/sbt-launch-*.jar"
RUN_SBT="$JAVA -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256m -Xmx1024M -Xss2M -jar $TEXTGROUNDER_DIR/bin/sbt-launch-*.jar"

########################### Process options ##########################

# NOTE: If environment var TG_JAVA_OPT is set on entry, it will be used.

VERBOSE=no
DEBUG=no
HADOOP=
HADOOP_NONDIST=
MEMORY=
JAVA_MISC_OPT=
JAVA_USER_OPT=
while true; do
  case "$1" in
    -verbose | --verbose ) VERBOSE=yes; shift ;;
    -debug-class | --debug-class )
      # I think that -verbose:class is the same as -XX:+TraceClassLoading.
      JAVA_MISC_OPT="$JAVA_MISC_OPT -verbose:class -XX:+TraceClassUnloading"
      shift ;;
    -debug | --debug ) DEBUG=yes; shift ;;
    -m | -memory | --memory ) MEMORY="$2"; shift 2 ;;
    -minheap | --minheap )
      JAVA_MISC_OPT="$JAVA_MISC_OPT -XX:MinHeapFreeRatio=$2"; shift 2 ;;
    -maxheap | --maxheap )
      JAVA_MISC_OPT="$JAVA_MISC_OPT -XX:MaxHeapFreeRatio=$2"; shift 2 ;;
    -escape-analysis | --escape-analysis )
      JAVA_MISC_OPT="$JAVA_MISC_OPT -XX:+DoEscapeAnalysis"; shift ;;
    -compressed-oops | --compressed-oops )
      JAVA_MISC_OPT="$JAVA_MISC_OPT -XX:+UseCompressedOops"; shift ;;
    -java-opt | --java-opt )
      JAVA_USER_OPT="$JAVA_USER_OPT $2"; shift 2 ;;
    -hadoop | --hadoop) HADOOP=yes; shift ;;
    -hadoop-nondist | --hadoop-nondist) HADOOP_NONDIST=yes; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

######################### Build up Java command line ########################

# For info on Sun JVM options, see:

# http://java.sun.com/docs/hotspot/VMOptions.html
#
# (redirects to:
#
# http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html
#
# )
#
# Also see the following for tuning garbage collection:
#
# http://www.oracle.com/technetwork/java/gc-tuning-5-138395.html

JAVA_MEMORY_OPT=
# Try to set the maximum heap size to something slightly less than
# the physical memory of the machine.
if [ -n "$MEMORY" ]; then
  JAVA_MEMORY_OPT="-Xmx$MEMORY"
elif [ -n "$TG_SET_JVM_MEMORY" ]; then
  MEMMB=`$TEXTGROUNDER_DIR/bin/textgrounder-memory`
  if [ "$VERBOSE" = yes ]; then
    dbg "Output from textgrounder-memory is: $MEMMB"
  fi
  if [ "$MEMMB" = unknown ]; then
    # The old way we set the heap size, to a very high virtual size.
    if [ -z "$MEMORY" ]; then
      if $JAVA -version 2>&1 | grep '64-Bit' > /dev/null; then
       JAVA_IS_64=yes
       # Maximum on Linux is about 127t (127 TB, i.e. 130,048 GB).  Maximum on
       # MacOS X 10.6 (Snow Leopard) is about 125t, but values that big cause a
       # pause of about 6 seconds at the beginning and a couple of seconds at
       # the end on my 4GB Mac.  4t doesn't cause much of a pause.
       MEMORY=4t
      else
       JAVA_IS_64=no
       MEMORY=2g
      fi
    fi
  else
    MEMORY="`expr $MEMMB - $RESERVED_MEMORY`m"
  fi
  JAVA_MEMORY_OPT="-Xmx$MEMORY"
fi

if [ "$VERBOSE" = yes -a -n "$JAVA_MEMORY_OPT" ]; then
  dbg "Setting maximum JVM heap size to $MEMORY"
fi

JAVA_DEBUG_OPT=
if [ "$DEBUG" = yes ]; then
  # Print details about when and how garbage collection happens; recommended
  # in http://www.oracle.com/technetwork/java/gc-tuning-5-138395.html
  JAVA_DEBUG_OPT="-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+TraceClassUnloading"
  #This will output a lot of stuff about class loading.  Enable it using
  # --debug-class if you want.
  #JAVA_DEBUG_OPT="$JAVA_DEBUG_OPT -XX:+TraceClassLoading"
fi

JARS="`echo $TEXTGROUNDER_DIR/lib/*.jar $TEXTGROUNDER_DIR/lib_managed/*/*.jar $TEXTGROUNDER_DIR/lib_managed/*/*/*.jar $TEXTGROUNDER_DIR/lib_managed/*/*/*/*.jar $TEXTGROUNDER_DIR/output/*.jar $TEXTGROUNDER_DIR/target/*.jar | tr ' ' ':'`"
SCALA_LIB="$HOME/.sbt/boot/scala-2.10.3/lib/scala-library.jar"
CP="$TEXTGROUNDER_DIR/target/classes:$SCALA_LIB:$JARS:$CLASSPATH"

# Later options override earlier ones, so put command-line options after
# the ones taken from environment variables (TG_JAVA_OPT and to some extent
# JAVA_MEMORY_OPT, because it depends on env var TG_SET_JVM_MEMORY).
JAVA_COMMAND="$JAVA $TG_JAVA_OPT $JAVA_MEMORY_OPT $JAVA_DEBUG_OPT $JAVA_MISC_OPT $JAVA_USER_OPT -classpath $CP"

######################### Usage text ########################

help()
{
cat >&2 <<EOF
TextGrounder $TEXTGROUNDER_VERSION usage:
  textgrounder [OPTIONS ...] COMMAND [ARGS ...]

Hadoop options:
  --hadoop              Run under Hadoop instead of locally.
  --hadoop-nondist      Run under Hadoop in non-distributed mode (aka
                        standalone mode), for testing. This simulates a full
                        Hadoop cluster within a single JVM.

Low-level options:
  --memory MEM, -m MEM  Specify maximum heap size (e.g. 2048m or 20g); if not
                        given, TextGrounder will attempt to set the heap size
                        to slightly under physical memory if the environment
                        variable TG_SET_JVM_MEMORY is set; otherwise, the
                        JVM will be left to set the heap size automatically.
  --verbose             Show what commands are being executed.
  --debug-class         Show each class loaded, and where it's loaded from.
  --debug               Tell the JVM to output debugging info.
  --minheap RATIO, --maxheap RATIO
                        Set the minimum and maximum free heap ratios.  If the
                        JVM is hogging memory, try --minheap 20 --maxheap 40
                        to make it more aggressively release memory to the OS
                        (or --minheap 10 --maxheap 20 to be even more
                        aggressive).
  --escape-analysis     Turn on escape analysis (on by default in Java 6
                        release 23 and later); may speed up code by reducing
                        allocation for short-lived objects.
  --compressed-oops     Turn on compressed object pointers (on by default
                        in Java 6 release 23 and later); may reduce memory
                        size on 64-bit machines (and possibly speed things up
                        as well).
  --java-opt OPTION     Add an arbitrary option to the 'java' executable.
                        To include multiple options, either enclose in quotes
                        or repeat '--java-opt' multiple times. (NOTE: Spaces
                        not currently handled inside of options specified
                        this way.)

Environment variables:

  TEXTGROUNDER_DIR      Location of TextGrounder installation; needs to be
                        set for this script to work at all.
  HADOOP_BINARY         Binary to use in order to run Hadoop; by default
                        just 'hadoop'.
  TG_SET_JVM_MEMORY     If non-blank, set the maximum JVM heap size to slightly
                        under the total physical memory size; useful if you
                        are getting out-of-memory errors.
  TG_JAVA_OPT           If non-blank, should contain additional options for
                        the JVM, and will be passed directly to the 'java'
                        executable.  See 'java -help' and 'java -X' for a
                        description of some possible options, although neither
                        of these documents all of the options.  For example,
                        none of the "non-standard/not-stable" -XX options
                        are documented this way; these typically control
                        performance, debugging and/or other low-level behavior.
                        See the following URL (although even this doesn't
                        document all of them):

   http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html

General commands:

  compile [COMMAND ...] Build TextGrounder from source using SBT;
                        equivalent to 'build compile'. An arbitrary
                        command can optionally be specified afterwards
                        (e.g. 'run CLASS ...'); if so, it will be executed
                        if the compilation succeeds.
  build                 Enter SBT command line, to issue further commands.
  build SBTCOMMAND ...  Run SBT using some other arbitrary command(s).
  sbt SBTCOMMAND ...    Run SBT using some other arbitrary command(s); same
                        as 'build'.
  run CLASS ...         Run the main method of a given class (with the
                        classpath set appropriately to pick up all
                        TextGrounder and library classes).
  hdebrun CLASS ...     Stands for "Hadoop debug run".  Same as 'run', but
                        turn on stuff more suitable for a Hadoop run during
                        debugging.  Turns on --verbose and --hadoop and adds
                        some Hadoop options immediately after the class name
                        to allow some number (by default, 20%) of all map and
                        reduce tasks to fail without killing the whole job.
  javap OPTIONS ...     Run 'javap' (with the classpath set appropriately).
  scalap OPTIONS ...    Run 'scalap' (with the classpath set appropriately).
  scala OPTIONS ...     Run 'scala' (with the classpath set appropriately);
                        useful for getting a console to experiment with the
                        TextGrounder code.  Note that you can also use the
                        command 'sbt console', although that requires that
                        SBT is set up properly and you can build from source
                        without errors.
  run-cp PROGRAM ...    Run an arbitrary Java-based program, setting up the
                        classpath appropriately.  This assumes that the
                        program takes the '-classpath' option with the same
                        format as 'java' and 'javac'.
  help                  output this help message

Geolocate commands:

  geolocate-document ... do document-level geolocation
  generate-kml ...      create KML files showing the distribution over the
                        Earth of specific words

The arguments for the various commands are specific to the particular
command, and often include options and/or file names.  Use --help after the
command for more information.
EOF
  exit 1
}

######################### Main program ########################

# Function to execute a command, optionally logging the command being
# executed on stderr and/or changing to the top-level TextGrounder directory
# before running.

execute()
{
  local CD
  if [ "$1" = "--cd" ]; then
    CD=yes
    shift
  else
    CD=no
  fi
  RUNCMD="$1"; shift
  if [ "$VERBOSE" = yes ]; then
    if [ "$CD" = yes ]; then
      dbg Executing: cd $TEXTGROUNDER_DIR
    fi
    dbg Executing: $RUNCMD "$@"
  fi
  if [ "$CD" = yes ]; then
    cd $TEXTGROUNDER_DIR
  fi
  $RUNCMD "$@"
}

# Main function to process command-line arguments and act accordingly.

process_args() {
  CMD="$1"
  shift

  if [ -z "$CMD" ]; then
    help

  elif [ "$CMD" = 'javap' ]; then

    execute javap -classpath "$CP" "$@"

  elif [ "$CMD" = 'scalap' ]; then

    execute scalap -classpath "$CP" "$@"

  elif [ "$CMD" = 'scala' ]; then

    execute scala -classpath "$CP" "$@"

  elif [ "$CMD" = 'run-cp' ]; then

    CP_CMD="$1"; shift
    execute "$CP_CMD" -classpath "$CP" "$@"

  elif [ "$CMD" = 'build' -o "$CMD" = 'sbt' ]; then

    # We need to cd to the top-level TextGrounder dir when running SBT,
    # so the proper build.sbt file gets picked up, etc.
    execute --cd "$RUN_SBT" "$@"

  elif [ "$CMD" = 'compile' ]; then

    # We need to cd to the top-level TextGrounder dir when running SBT,
    # so the proper build.sbt file gets picked up, etc.
    (execute --cd "$RUN_SBT" compile) && {
      if [ -n "$1" ]; then
        process_args "$@"
      fi
    }

  else

    CLASS=
    HADOOP_ARGS=
    TGGEOLOCATE=opennlp.textgrounder.geolocate

    case $CMD in
      # Geolocate commands
      geolocate-document)
        # Include now because we need TEXTGROUNDER_URL; but not before so that
        # we don't get complaints about TG_CORPUS_DIR otherwise.
        . config-geolocate

        # Note that the only difference between running in distributed and
        # non-distributed mode is how we run things (using 'hadoop jar' for
        # distributed, 'java' for non-distributed) and the input paths we
        # pass (through --textgrounder-dir here, and also through corpora
        # paths in 'tg-geolocate').
        if [ -n "$HADOOP" ]; then
          HADOOP_ARGS="--textgrounder-dir $TEXTGROUNDER_URL" CLASS=$TGGEOLOCATE.HadoopGeolocateDocument
        elif [ -n "$HADOOP_NONDIST" ]; then
          HADOOP_ARGS="--textgrounder-dir $TEXTGROUNDER_URL" CLASS=$TGGEOLOCATE.HadoopGeolocateDocument
        else
          CLASS=$TGGEOLOCATE.GeolocateDocument
        fi
      ;;
      generate-kml) CLASS=$TGGEOLOCATE.GenerateKML;;

      # Misc
      run) CLASS="$1"; shift;;
      hdebrun)
        VERBOSE=yes; HADOOP=yes; CLASS="$1"; shift;
        HADOOP_ARGS="$HADOOP_FAILURE_OK_ARGS $HADOOP_ARGS"
        ;;
      help) help; exit 1;;
      *) dbg "Unrecognized command: $CMD"; help; exit 1;;
    esac

    # We need to *not* cd to the top-level TextGrounder dir, otherwise if
    # there are command-line arguments referring relatively to files, the
    # files won't be found because the lookup will be relative to the
    # wrong directory.

    if [ -n "$HADOOP" ]; then
      ASSEMBLY_DIR="$TEXTGROUNDER_DIR/target"
      ASSEMBLY_GLOB="$ASSEMBLY_DIR/TextGrounder-*.jar"
      if [ "`echo $ASSEMBLY_GLOB`" = "$ASSEMBLY_GLOB" ]; then
        dbg "No assembly file!  Unable to execute in Hadoop distributed mode."
        exit 1
      else
        NUM_ASSEMBLY_FILES=`ls -1 $ASSEMBLY_GLOB | wc -l`
        ASSEMBLY_FILE=`ls -1 $ASSEMBLY_GLOB | head -1`
        if [ "$NUM_ASSEMBLY_FILES" -ne 1 ]; then
          dbg "Warning!  More than one assembly file found:"
          ls -1 $ASSEMBLY_GLOB
          dbg "Choosing $ASSEMBLY_FILE"
        fi
      fi

      HADOOP_COMMAND="$HADOOP_BINARY jar $ASSEMBLY_FILE"

      execute "$HADOOP_COMMAND $CLASS" $HADOOP_ARGS "$@"
    else
      execute "$JAVA_COMMAND $CLASS" $HADOOP_ARGS "$@"
    fi

  fi
}

process_args "$@"
