#!/bin/bash

# Extract results from a number of runs.

# Given output from a run-* front end, extract the mean and median errors
# from each specified file, compute the avg mean/median error, and output
# a line giving the errors along with relevant parameters for that particular
# run.

sort=
averagesort=
meansort=
mediansort=
accuracysort=
acc161sort=
numevalsort=
numtrainsort=
filesort=
runtimesort=
cputimesort=
verbose=
debug=
omit_average=
omit_mean=
omit_median=
omit_accuracy=
omit_acc161=
omit_numeval=
omit_numtrain=
omit_file=
omit_rss=
omit_runtime=
omit_cputime=

while true; do
  case "$1" in
    --no-sort ) sort=no; shift ;;
    --sort | --sort-average | --sort-avg ) sort=yes ; averagesort=yes; shift ;;
    --sort-mean ) sort=yes ; meansort=yes; shift ;;
    --sort-median ) sort=yes ; mediansort=yes; shift ;;
    --sort-accuracy | --sort-acc ) sort=yes ; accuracysort=yes; shift ;;
    --sort-acc161 ) sort=yes ; acc161sort=yes; shift ;;
    --sort-numeval ) sort=yes ; numevalsort=yes; shift ;;
    --sort-numtrain ) sort=yes ; numtrainsort=yes; shift ;;
    --sort-file | --sort-name ) sort=yes ; filesort=yes; shift ;;
    --sort-runtime ) sort=yes ; runtimesort=yes; shift ;;
    --sort-cputime ) sort=yes ; cputimesort=yes; shift ;;
    #Unimplemented because it's tricky to sort the way we output it; need
    #to sort on raw number and then convert to human-readable
    #--sort-rss ) sort=yes ; rsssort=yes; shift ;;
    --omit-average | --omit-avg ) omit_average=yes; shift ;;
    --omit-mean ) omit_mean=yes; shift ;;
    --omit-median ) omit_median=yes; shift ;;
    --omit-accuracy | --omit-acc ) omit_accuracy=yes; shift ;;
    --omit-acc161 ) omit_acc161=yes; shift ;;
    --omit-numeval ) omit_numeval=yes; shift ;;
    --omit-numtrain ) omit_numtrain=yes; shift ;;
    --omit-file | --omit-name ) omit_file=yes; shift ;;
    --omit-runtime ) omit_runtime=yes; shift ;;
    --omit-cputime ) omit_cputime=yes; shift ;;
    --omit-rss ) omit_rss=yes; shift ;;
    --verbose ) verbose=yes ; shift ;;
    --debug ) debug=yes ; shift ;;
    -- ) shift ; break ;;
    -*) echo "Unrecognized argument: $1"; exit 1 ;;
    * ) break ;;
  esac
done

if [ -z "$sort" ]; then
  sort=yes
  averagesort=yes
fi

curcol=1
numevalcol=$curcol
if [ -z "$omit_numeval" ]; then
  let curcol=$curcol+1
fi
numtraincol=$curcol
if [ -z "$omit_numtrain" ]; then
  let curcol=$curcol+1
fi
accuracycol=$curcol
if [ -z "$omit_accuracy" ]; then
  let curcol=$curcol+1
fi
acc161col=$curcol
if [ -z "$omit_acc161" ]; then
  let curcol=$curcol+1
fi
meancol=$curcol
if [ -z "$omit_mean" ]; then
  let curcol=$curcol+1
fi
mediancol=$curcol
if [ -z "$omit_median" ]; then
  let curcol=$curcol+1
fi
averagecol=$curcol
if [ -z "$omit_average" ]; then
  let curcol=$curcol+1
fi
runtimecol=$curcol
if [ -z "$omit_runtime" ]; then
  let curcol=$curcol+1
fi
cputimecol=$curcol
if [ -z "$omit_cputime" ]; then
  let curcol=$curcol+1
fi
rsscol=$curcol
if [ -z "$omit_rss" ]; then
  let curcol=$curcol+1
fi
filecol=$curcol
if [ -z "$omit_file" ]; then
  let curcol=$curcol+1
fi

if [ "$verbose" != yes ]; then
  #echo "  #Eval   #Train  %Acc. Acc@161 Mean   Median  Average  Runtime Cputime   RSS    File"
  if [ -z "$omit_numeval" ]; then
    echo -n "  #Eval "
  fi
  if [ -z "$omit_numtrain" ]; then
    echo -n "  #Train "
  fi
  if [ -z "$omit_accuracy" ]; then
    echo -n " %Acc. "
  fi
  if [ -z "$omit_acc161" ]; then
    echo -n "Acc@161 "
  fi
  if [ -z "$omit_mean" ]; then
    echo -n " Mean  "
  fi
  if [ -z "$omit_median" ]; then
    echo -n " Median "
  fi
  if [ -z "$omit_average" ]; then
    echo -n "Average "
  fi
  if [ -z "$omit_runtime" ]; then
    echo -n " Runtime "
  fi
  if [ -z "$omit_cputime" ]; then
    echo -n " Cputime "
  fi
  if [ -z "$omit_rss" ]; then
    echo -n "   RSS    "
  fi
  if [ -z "$omit_file" ]; then
    echo -n "File"
  fi
  echo ""
fi

function formattime() {
  local time0
  local time0prompt
  local time1
  time0="$1"
  time0prompt="$2"
  # Convert time from "24 minutes 5 seconds" or "0 minutes 6 seconds"
  # (old style) or "24 min 5 sec" or "6 sec" (new style) to a raw version
  # of HH:MM:SS.
  time0=$(echo "$time0" | perl -pe 's/ (hour|hr)s? /:/;' -e 's/ min(ute)?s? /:/;' -e 's/ sec(ond)s?//;')
  if [ -n "$debug" ]; then
    echo "$time0prompt: [$time0]"
  fi
  # Reformat to proper HH:MM:SS, making sure to have two digits for the
  # minutes.
  if [ -z "$time0" ]; then
    time1="NA"
  else
    time1=$(echo "$time0" | perl -ne '
      my ($hrs, $mins, $secs) = /^(?:(.*?):)?(?:(.*?):)?(.*?)$/;
      # We may have only a number of seconds; check for this.
      if (!defined($hrs)) { $hrs = 0; }
      if (!defined($mins)) { $mins = $hrs; $hrs = 0; }
      if ($hrs == 0 && $mins == 0) {
        $secs = sprintf("%04.1f", $secs);
      } else {
        $secs += 0.5;
        while ($secs >= 60) {
          $secs -= 60;
          $mins += 1;
        }
        while ($mins >= 60) {
          $mins -= 60;
          $hrs += 1;
        }
        $secs = sprintf("%02d", $secs);
      }
      $mins = sprintf("%02d", $mins);
      # $secs = sprintf("%04.1f", $secs);
      if ($hrs == 0) { $hrs = ""; } else { $hrs = "${hrs}:"; }
      print("$hrs$mins:$secs");
    ')
  fi
  echo "$time1"
}

function output() {
for x in ${1+"$@"}; do
  if [ -n "$debug" ]; then
    echo "[$x]"
    echo ""
  fi
  args=$(grep -m 1 '^Nohup script invoked as:.* --full-id ' "$x")
  if [ -n "$args" ]; then
    args=$(echo $args | perl -pe 's/^.*? --full-id (\S+) .*$/$1/')
  else
    args=$(grep -m 1 '^Arguments:' "$x")
    args=$(echo $args | perl -pe 's/^Arguments: //;' -e 's/--input(-corpus)? [^ ]*\///')
    args=$(echo $args | perl -pe 's/  *--*([^ ]*)  *([^-][^ ]*)/ $1=$2/g;' -e 's/  *--*([^ ]*)/ $1/g;' -e 's/ /./g;' -e 's/\//-/g;')
  fi
  results=$(sed -n '/^Final results/,/^Ending final results/p' "$x")
  mean=$(echo "$results" | egrep 'Mean true error' | perl -pe 's/^.*distance = +(\S+).*/$1/')
  median=$(echo "$results" | egrep 'Median true error' | perl -pe 's/^.*distance = +(\S+).*/$1/')
  avg=
  if [ -n "$mean" -a -n "$median" ]; then
    if [ -n "$debug" ]; then
      echo "Extracted mean: [$mean]"
      echo "Extracted median: [$median]"
    fi
    avg=$(echo "2k $mean $median + 2/p" | dc)
  fi
  acc=$(echo "$results" | egrep 'Percent correct at rank <= 1 =' | perl -pe 's/.*= (.*?)%.*/$1/')
  acc161=$(echo "$results" | egrep 'Accuracy@161 =' | perl -pe 's/.*= (.*?)%.*/$1/')
  numeval=$(echo "$results" | egrep 'instances.total' | perl -pe 's/.*= (.*?) *$/$1/')
  numtrain=$(echo "$results" | egrep 'bytask.*num_training_documents_by_split\.training =' | head -n 1 | perl -pe 's/.*= (.*?) *$/$1/')
  finalstats=$(sed -n '/^Ending final results/,/^Program running time/p' "$x")
  # Note: This used to grep for 'Program running time:'; the elapsed time below is
  # similar but doesn't include time spent determing memory usage, etc.
  runtimeraw=$(echo "$finalstats" | egrep 'Total elapsed time since program start:' | perl -pe 's/.*: //;')
  runtime=$(formattime "$runtimeraw" "Runtime0")
  cputimeraw=$(echo "$finalstats" | egrep 'Total CPU time since program start with children:' | perl -pe 's/.*: //;')
  cputime=$(formattime "$cputimeraw" "Cputime0")
  # Check for the old way of outputting and convert to new-style (618.63 MB).
  # The old style had various lines beginning "Memory usage" for different
  # usage stats, and had the resident size given as something like
  #
  # Memory usage, actual (i.e. resident set) (proc): 618,635,264 bytes
  #
  rss=$(echo "$finalstats" | egrep 'Memory usage, actual' | perl -pe 's/.*: (.*?) bytes/$1/')
  if [ -n "$rss" ]; then
    rss=$(echo "$rss" | perl -ne '
      my ($rss) = /^(.*)$/;
      $rss =~ s/,//g;
      $rss = $rss + 0; # Make sure string interpreted as number, maybe not nec
      if ($rss >= 1_000_000_000) { printf("%.2fGB", $rss/1_000_000_000.0); }
      elsif ($rss >= 1_000_000) { printf("%.2fMB", $rss/1_000_000.0); }
      else { printf("%.2fKB", $rss/1_000.0); }
    ')
  else
    # The new way, which lines like
    #
    # Memory usage: virtual: 13.51 GB, resident: 1.49 GB, Java heap: 59.61 MB
    #
    rss=$(echo "$finalstats" | egrep 'Memory usage:' | perl -pe 's/.*resident: (.*?) (.B).*$/$1$2/')
  fi
  if [ -n "$mean" -o -n "$median" -o -n "$avg" -o -n "$acc" ]; then
    skip=no
  else
    skip=yes
  fi
  if [ -z "$numeval" ]; then
    numeval="NA"
  fi
  if [ -z "$numtrain" ]; then
    numtrain="NA"
  fi
  if [ -z "$acc" ]; then
    acc="NA"
  fi
  if [ -z "$acc161" ]; then
    acc161="NA"
  fi
  if [ -z "$mean" ]; then
    mean="NA"
  fi
  if [ -z "$median" ]; then
    median="NA"
  fi
  if [ -z "$avg" ]; then
    avg="NA"
  fi
  if [ -z "$rss" ]; then
    rss="NA"
  fi
  numeval=$(printf '%7s' "$numeval")
  numtrain=$(printf '%8s' "$numtrain")
  acc=$(printf '%6s' "$acc")
  acc161=$(printf '%6s' "$acc161")
  mean=$(printf '%7s' "$mean")
  median=$(printf '%7s' "$median")
  avg=$(printf '%7s' "$avg")
  runtime=$(printf '%8s' "$runtime")
  cputime=$(printf '%8s' "$cputime")
  rss=$(printf '%9s' "$rss")
  if [ -n "$debug" ]; then
    echo "Args: [$args]"
    echo "Mean: [$mean]"
    echo "Median: [$median]"
    echo "Average: [$avg]"
    echo "%Accuracy: [$acc]"
    echo "Acc@161: [$acc161]"
    echo "#Eval: [$numeval]"
    echo "#Train: [$numtrain]"
    echo "Runtime: [$runtime]"
    echo "Cputime: [$cputime]"
    echo "RSS: [$rss]"
  fi
  if [ "$verbose" = yes ]; then
    echo "$results" | grep 'true error' | perl -ne "print '$args', '  ', \$_"
    if [ -n "$avg" ]; then
      echo "$args   Avg-mean-median true error distance = $avg km"
    fi
  elif [ "$skip" = no ]; then
    #echo "$numeval $numtrain $acc $mean $median $avg $runtime $cputime $rss $args"
    if [ -z "$omit_numeval" ]; then
      echo -n "$numeval "
    fi
    if [ -z "$omit_numtrain" ]; then
      echo -n "$numtrain "
    fi
    if [ -z "$omit_accuracy" ]; then
      echo -n "$acc "
    fi
    if [ -z "$omit_acc161" ]; then
      echo -n "$acc161 "
    fi
    if [ -z "$omit_mean" ]; then
      echo -n "$mean "
    fi
    if [ -z "$omit_median" ]; then
      echo -n "$median "
    fi
    if [ -z "$omit_average" ]; then
      echo -n "$avg "
    fi
    if [ -z "$omit_runtime" ]; then
      echo -n "$runtime "
    fi
    if [ -z "$omit_cputime" ]; then
      echo -n "$cputime "
    fi
    if [ -z "$omit_rss" ]; then
      echo -n "$rss "
    fi
    if [ -z "$omit_file" ]; then
      echo -n "$args"
    fi
    echo ""
  fi
done
}

if [ "$filesort" = yes ]; then
  output ${1+"$@"} | sort -k $filecol
elif [ "$runtimesort" = yes ]; then
  output ${1+"$@"} | sort -nr -k $runtimecol
elif [ "$cputimesort" = yes ]; then
  output ${1+"$@"} | sort -nr -k $cputimecol
elif [ "$averagesort" = yes ]; then
  output ${1+"$@"} | sort -n -k $averagecol
elif [ "$meansort" = yes ]; then
  output ${1+"$@"} | sort -n -k $meancol
elif [ "$mediansort" = yes ]; then
  output ${1+"$@"} | sort -n -k $mediancol
elif [ "$accuracysort" = yes ]; then
  output ${1+"$@"} | sort -nr -k $accuracycol
elif [ "$acc161sort" = yes ]; then
  output ${1+"$@"} | sort -nr -k $acc161col
elif [ "$numevalsort" = yes ]; then
  output ${1+"$@"} | sort -nr -k $numevalcol
elif [ "$numtrainsort" = yes ]; then
  output ${1+"$@"} | sort -nr -k $numtraincol
else
  output ${1+"$@"}
fi

